// Customize the build to build native code
task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

def runCommand(String[] args) {
 new ByteArrayOutputStream().withStream { os ->
  def result = exec {
   commandLine = args
   standardOutput = os
  }
  return os.toString().trim()
 }
}

ext {
	cnf = rootProject.project(bnd_cnf)
	os = System.env.OS ?: runCommand('uname', '-s')
	arch = System.env.ARCH ?: runCommand('uname', '-m')
	osgi_os = os.replaceFirst(/^Darwin/, "MacOSX")
	osgi_arch = arch.replaceFirst(/(?i)arm(.*)/,"ARM")
	extension = (os == "Darwin") ? 'dylib' : 'so'
	lib = System.env.NATIVE ?: "torch"
	jenkins_build = System.env.BUILD ?: "false"
	download_url = "http://dianne.intec.ugent.be/"
	println("Configuring workspace with configuration parameters 'OS': '$os', 'ARCH': '$arch', 'osgi_os': '$osgi_os', 'osgi_arch': '$osgi_arch', extension: '$extension' and 'NATIVE' lib: '$lib'")
}

// create placeholder of template files so they exist before configuration phase of subprojects
runCommand('find', '.', '-name', '*.template', '-execdir', 'bash', '-c', 'touch ${0%%\\.template}', '{}', ';') 

/* Configure the subprojects */
subprojects {
    if (plugins.hasPlugin('biz.aQute.bnd')) {
    // additional configuration for Bnd project

	if(name.equals("tools")){
		project.jar.enabled=false
	}

	fileTree(projectDir) {
		include '*.bndrun'
	}.each {
		def bndrun = it.name - '.bndrun'
		task("run.${bndrun}") {
			description "Run the exported ${bndrun}.jar file."
			dependsOn "export.${bndrun}"
			group 'run'
			def executableJar = file("${distsDir}/executable/${bndrun}.jar")
			inputs.file executableJar
			doLast {
				logger.info "Running {} from directory {}", executableJar.absolutePath, projectDir.absolutePath
				javaexec {
					main '-jar'
					args executableJar
					if (project.hasProperty('arguments'))
						jvmArgs arguments.split()
					standardInput System.in
					ignoreExitValue true
					workingDir projectDir
				}
			}
		}
	}
	
	task("cleanAll", description: "Clean all code including all (sub)native libraries.", group: 'build') {}
	cleanAll.dependsOn(clean)

	fileTree(projectDir) {
		include 'jni/Makefile'
	}.each { File file ->
		logger.info "Found Makefile in jni folder: {}", file.absolutePath
		task("buildNative", type: Exec, description: "Build native code", group: "build") {
			def outputExtentions = ["*.o","*.dylib","*.so","*.a", "*_*.h"]
			inputs.files compileJava
			inputs.files fileTree(dir: file.parent, excludes: outputExtentions)
			outputs.dir "$projectDir/native/$lib/$os/$arch"
			outputs.dir "$projectDir/native/$os/$arch"
			outputs.files fileTree(dir: file.parent, includes: outputExtentions)
			workingDir file.parent
			commandLine "make"
		}
		jar.dependsOn("buildNative")
		
		task("cleanNative", type: Exec, description: "Clean dynamic libraries.", group: 'build') {
			workingDir file.parent
			commandLine "make", "clean"
			standardOutput = new ByteArrayOutputStream()
		}
		clean.dependsOn("cleanNative")
		
		task("cleanAllNative", type: Exec, description: "Clean all native code including sub projects.", group: 'build') {
			workingDir file.parent
			commandLine "make", "cleanall"
			standardOutput = new ByteArrayOutputStream()
		}
		cleanAll.dependsOn("cleanAllNative")
	}


	fileTree(projectDir) {
		include 'Dockerfile'
	}.each { File file ->
		logger.info "Found Dockerfile in folder: {}", file.absolutePath
		task("docker", type: Exec, description: "Build docker container", group: "util", dependsOn: ":docker") {
			def tag = 'dianne/' + file.parent.tokenize('.')[-1]
			workingDir file.parent
			commandLine "docker", "build", "-t", "$tag", "."
		}
	}

	/* fix native tests */
    tasks.withType(Test) {
      systemProperty "java.library.path", "${bnd.workspace}/be.iminds.iot.dianne.tensor.native/native/${lib}/${os}/${arch}/"
    }
  }
}
getTasksByName('test', true).each{ task -> task.dependsOn(getTasksByName('buildNative', true)) }
getAllTasks(true).each{ project -> project.value.each{ task -> if(task.name.startsWith('export.')) { task.dependsOn('clean' + task.name.substring(0,1).toUpperCase() + task.name.substring(1)) } } }

task("datasets") {
	description "Download pre-configured datasets (all available by default)."
	group 'util'
	doLast {
		def ds = project.hasProperty('which') ? project.properties['which'] + "/" : ""
		def dir = project.properties['directory'] ?: "./tools/datasets/"
		
		logger.info "Downloading dataset(s) {} to directory {}", ds , dir
		
		directory(dir)
		download(download_url + "datasets/" + ds, dir)
	}
}

task("models") {
	description "Download neural network models (all available by default)."
	group 'util'
	doLast {
		def mod = project.hasProperty('which') ? project.properties['which'] + "/" : ""
		def dir = project.properties['directory'] ?: "./tools/models/"
		
		logger.info "Downloading model(s) {} to directory {}", mod , dir
		
		directory(dir)
		download(download_url + "models/" + mod, dir)
	}
}

task("docker") {
	description "Generate main dianne docker container."
	group 'util'
	doLast {
		exec {
			commandLine "docker", "build", "-t", "dianne", "."
		}
	}
}

def download(String[] args) {
	def url = args[0]
	def dir = args[1]

	exec {
		/* Could be better, but works for now */
		commandLine "wget", "-nv", "-r", "-np", "-nH", "--cut-dirs=1", "--reject=index.html*", "-P", dir, url
	}
}

def directory(String arg) {
	exec {
		commandLine "mkdir", "-p", arg
	}
}
